
= styles_for :task, :opportunity, :account

-# .title
-#   %span#title #{t :my_tasks}
-# %ul.list#tasks
-#   - unless @my_tasks.empty?
-#     = render partial: "home/task", collection: @my_tasks.limit(10)
-#     = show_hidden_entities_message(@my_tasks.count, 'task', 10)
-#   - else
-#     #{t :no_task_records}

-# .title
-#   %span#title #{t :my_opportunities}
-# %ul.list#opportunities
-#   - unless @my_opportunities.empty?
-#     = render partial: "home/opportunity", collection: @my_opportunities.limit(10)
-#     = show_hidden_entities_message(@my_opportunities.count, 'opportunity', 10)
-#   - else
-#     #{t :no_opportunity_records}

-# .title
-#   %span#title #{t :my_accounts}
-# %ul.list#accounts
-#   - unless @my_accounts.empty?
-#     = render partial: "home/account", collection: @my_accounts.limit(10)
-#     = show_hidden_entities_message(@my_accounts.count, 'account', 10)
-#   - else
-#     #{t :no_account_records}

-# .title_tools
-#   = link_to_inline(:options, url_for(action: :options), text: t(:options))

-# .title
-#   %span#title #{t :recent_activity}
-#   = image_tag("loading.gif", size: :thumb, id: "loading", style: "display: none;")
-# .remote#options{ hidden }

-# %ul.list#activities
-#   - unless @activities.empty?
-#     = render partial: "activity", collection: @activities
-#   - else
-#     #{t :no_activity_records}

%div
  %div.mt-2
    %h1 Main Dashboard
  %div.testTOCheck.mt-2
    %div.testBox.mar-r
      %div.testTOCheck.p-15
        %div.font-orange-20
          %h4.mt-1 Recently Leads
        %div 
          %input.inputDate.newCustomButton{ placeholder: "Search Lead" }
      %div.flex-center.mt-2.table-responsive
        %table.fs-14.tableBorder
          %thead
            %tr
              %th.p-14.theadLeads Lead Name
              %th.p-14.theadLeads Company Name
              %th.p-14.theadLeads Main Phone
              %th.p-14.theadLeads Status
          %tbody
            - @leads.each do |lead|
              %tr
                %td.p-14= "#{lead.first_name} #{lead.last_name}"
                %td.p-14= lead.company
                %td.p-14= lead.phone || lead.mobile
                %td{:class => lead_status_class(lead.status)}= lead.status
    %div.testBox
      %div.testTOCheck.p-15
        %div.font-orange-20
          %h4.mt-1 Leads By Stage
        %div 
          %input.inputDate.newCustomButton{ placeholder: "Search Lead" }
      %div.chartPie
        %canvas#statusPieChart{ width: "300", height: "300" }
  %div.testTOCheck.mt-2
    %div.testBox.mar-r
      %div.font-orange-20
        %h4.mt-1 Activities
      %ul.list#activities
        - unless @activities.empty?
          = render partial: "activity", collection: @activities
        - else
          #{t :no_activity_records}
    %div.testBox
      %div.font-orange-20
        %h4.mt-1 Lists
      %div.mt-1
        = render "lists/lists"
        = render "shared/recently"
      
  %div.mt-2
    %div.testBoxLarge.mar-r.p-14
      %div.font-orange-20
        %h4.mt-1 Reminders:
      %div.testTOCheck.mt-2
        %div.flex
          %div.mar-r.iconOrangeCircle
            %div icon
          %div.mt-1
            %h3 Company Name - Today at 2pm
            %p.m0 Lead Name
        %div.mt-2
          %span
            %a Mark as done -
          %span
            %a Edit -
          %span
            %a Convert -
          %span
            %a Reject -
          %span
            %a Delete 
      %div.testTOCheck.mt-2
        %div.flex
          %div.mar-r.iconOrangeCircle
            %div icon
          %div.mt-1
            %h3 Company Name - Today at 2pm
            %p.m0 Lead Name
        %div.mt-2
          %span
            %a Mark as done -
          %span
            %a Edit -
          %span
            %a Convert -
          %span
            %a Reject -
          %span
            %a Delete
      %div.testTOCheck.mt-2
        %div.flex
          %div.mar-r.iconOrangeCircle
            %div icon
          %div.mt-1
            %h3 Company Name - Today at 2pm
            %p.m0 Lead Name
        %div.mt-2
          %span
            %a Mark as done -
          %span
            %a Edit -
          %span
            %a Convert -
          %span
            %a Reject -
          %span
            %a Delete



#export= render "shared/export"

:javascript
  document.addEventListener('DOMContentLoaded', function() {
    const percentages = #{raw @percentages.to_json};
    console.log("DEBUG: Percentages", percentages); // Debugging output

    const canvas = document.getElementById('statusPieChart');
    const ctx = canvas.getContext('2d');

    // Define colors for the pie slices
    const colors = ['#FF9C9C', '#99d5f8', '#CFF6D1'];

    // Define canvas dimensions
    const canvasWidth = 300;
    const canvasHeight = 300;
    const centerX = canvasWidth / 2;
    const centerY = canvasHeight / 2;
    const radius = canvasWidth / 2 - 20; // Smaller radius to fit within the canvas

    // Calculate the starting and ending angles for each slice
    let startAngle = 0;
    const labels = Object.keys(percentages);
    const data = Object.values(percentages);

    data.forEach((percentage, index) => {
      const sliceAngle = (percentage / 100) * 2 * Math.PI;
      const endAngle = startAngle + sliceAngle;

      // Draw the pie slice
      ctx.beginPath();
      ctx.moveTo(centerX, centerY); // Center of the pie
      ctx.arc(centerX, centerY, radius, startAngle, endAngle);
      ctx.closePath();
      ctx.fillStyle = colors[index % colors.length];
      ctx.fill();

      startAngle = endAngle;
    });

    // Draw the labels
    startAngle = 0;
    ctx.fillStyle = "#000";
    ctx.font = "12px Arial"; // Smaller font size for the labels
    data.forEach((percentage, index) => {
      const sliceAngle = (percentage / 100) * 2 * Math.PI;
      const labelX = centerX + (radius / 1.5) * Math.cos(startAngle + sliceAngle / 2);
      const labelY = centerY + (radius / 1.5) * Math.sin(startAngle + sliceAngle / 2);

      ctx.fillText(`${labels[index]}: ${percentage}%`, labelX, labelY);
      startAngle += sliceAngle;
    });
  });

