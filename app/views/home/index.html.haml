
= styles_for :task, :opportunity, :account

-# .title
-#   %span#title #{t :my_tasks}
-# %ul.list#tasks
-#   - unless @my_tasks.empty?
-#     = render partial: "home/task", collection: @my_tasks.limit(10)
-#     = show_hidden_entities_message(@my_tasks.count, 'task', 10)
-#   - else
-#     #{t :no_task_records}

-# .title
-#   %span#title #{t :my_opportunities}
-# %ul.list#opportunities
-#   - unless @my_opportunities.empty?
-#     = render partial: "home/opportunity", collection: @my_opportunities.limit(10)
-#     = show_hidden_entities_message(@my_opportunities.count, 'opportunity', 10)
-#   - else
-#     #{t :no_opportunity_records}

-# .title
-#   %span#title #{t :my_accounts}
-# %ul.list#accounts
-#   - unless @my_accounts.empty?
-#     = render partial: "home/account", collection: @my_accounts.limit(10)
-#     = show_hidden_entities_message(@my_accounts.count, 'account', 10)
-#   - else
-#     #{t :no_account_records}

-# .title_tools
-#   = link_to_inline(:options, url_for(action: :options), text: t(:options))

-# .title
-#   %span#title #{t :recent_activity}
-#   = image_tag("loading.gif", size: :thumb, id: "loading", style: "display: none;")
-# .remote#options{ hidden }

-# %ul.list#activities
-#   - unless @activities.empty?
-#     = render partial: "activity", collection: @activities
-#   - else
-#     #{t :no_activity_records}

%div
  %div.mt-2
    %h1 Main Dashboard
  %div.testTOCheck
    %div.customerBox
      %div
        %p.boxesDashboardTtile 
          Reminders
      %div.customerFlex.pController
        %div
          %div 
            Today
          %div
            %h3.bold-number-miniBoxes
              = @todays_reminders.length 
        %div.porcentageBox.flex-center
          %div
            = image_tag("increase1.png")
          %div
            %p.p0.pDashboard-miniBoxes +10.45%

    %div.customerBox
      %div
        %p.boxesDashboardTtile Leads Accepted
      %div.customerFlex.pController
        %div
          %div 
            Last Months
          %div
            %h3.bold-number-miniBoxes
              = @won_leads.length 
        %div.porcentageBox.flex-center
          %div
            = image_tag("increase1.png")
          %div
            %p.p0.pDashboard-miniBoxes +10.45%

    %div.customerBox
      %div.overlayCommingSoon
        Feature Coming Soon
      %div
        %p.boxesDashboardTtile Dealers Enrollment
      %div.customerFlex.pController
        %div
          %div 
            Last Months
          %div
            %h3.bold-number-miniBoxes
              NaN
        %div.porcentageBox.flex-center
          %div
            = image_tag("increase1.png")
          %div
            %p.p0.pDashboard-miniBoxes Nan
  %div.testTOCheck.mt-2
    %div.testBox.mar-r
      %div.testTOCheck.p-15
        %div.font-orange-20
          %h4.mt-1 Recently Leads
        %div
          -# %input#lead-name-filter_home.inputDate.newCustomButton{ placeholder: "Search Lead", type: "text" }
      %div.flex-center.mt-2.table-responsive
        %table.fs-14.tableBorder
          %thead
            %tr
              %th.p-14.theadLeads Company Name
              %th.p-14.theadLeads Main Phone
              %th.p-14.theadLeads Main Email
              %th.p-14.theadLeads Status
          %tbody
            - @leads.each do |lead|
              %tr
                %td.p-14= lead.company
                %td.p-14= lead.phone || lead.mobile
                %td.p-14= lead.email
                %td{:class => lead_status_class(lead.status)}= lead.status 
    %div.testBox.mobile-mt-2
      %div.testTOCheck.p-15
        %div.font-orange-20
          %h4.mt-1 Leads By Stage
        %div 
          -# %input.inputDate.newCustomButton{ placeholder: "Search Lead" }
      %div.chartPie.mt-5
        %canvas#statusPieChart{ width: "300", height: "300" }
  %div.testTOCheck.mt-2
    %div.testBox.mar-r
      %div.font-orange-20
        %h4.mt-1 Activities
      %ul.list#activities
        - unless @activities.empty?
          = render partial: "activity", collection: @activities
        - else
          #{t :no_activity_records}
    %div.testBox.mobile-mt-2
      %div.font-orange-20
        %h4.mt-1 Lists
      %div.mt-1
        = render "lists/lists"
        = render "shared/recently"
      
  %div.mt-2
    %div.testBoxLarge.mar-r.p-14
      %div.font-orange-20
        %h4.mt-1 Reminders:
      %div.mt-2
        - @todays_reminders.each do |reminder|
          %div.mt-1
            %div.customerFlex.al-item.border-reminders-bottom
              %div.flex
                %div.mar-r.iconOrangeCircle
                  %div
                    - case reminder.type
                    - when 'sms'
                      %i.fa.fa-envelope.colorAndSizeIconReminders
                    - when 'call'
                      %i.fa.fa-phone.colorAndSizeIconReminders
                    - when 'email'
                      %i.fa.fa-at.colorAndSizeIconReminders
                %div
                  %div.flex.al-item.mt-20-neg
                    %div
                      %p Company:
                    %div
                      %span.f-bold.ml-7= @lead_companies[reminder.lead_id][:company]
                  %div.flex.al-item.mt-20-neg
                    %div
                      %p Phone:
                    %div
                      %span.f-bold.ml-7= @lead_companies[reminder.lead_id][:phone]
                  %div.flex.al-item.mt-20-neg
                    %div
                      %p Email:
                    %div
                      %span.f-bold.ml-7= @lead_companies[reminder.lead_id][:email]
              %div
                %div
                  %div.flex.al-item.mt-20-neg
                    %div
                      %p Status:
                    %div
                      %span.f-bold.ml-7= reminder.status
                      -# %span.f-bold{ class: lead_status_class(reminder.status) }= reminder.status
                  %div.flex.al-item.mt-20-neg
                    %div
                      %p Date:
                    %div
                      %span.f-bold.ml-7= reminder.date
                  %div.flex.al-item.mt-20-neg
                    %div
                      %p Type:
                    %div
                      %span.f-bold.ml-7= reminder.type 
                -# %p.m0="Mobile: #{@lead_companies[reminder.lead_id][:mobile]}"
               
                -# %p.m0="Alt Email: #{@lead_companies[reminder.lead_id][:alt_email]}"
            %div.mt-2
              -# %span
              -#   %a Mark as done -
              -# %span
              -#   %a Edit -
              -# %span
              -#   %a Convert -
              -# %span
              -#   %a Reject -
              -# %span
              -#   %a Delete       
#export= render "shared/export"

:javascript
  document.addEventListener('DOMContentLoaded', function() {
    const percentages = #{raw @percentages.to_json};
    console.log("DEBUG: Percentages", percentages); // Debugging output

    const canvas = document.getElementById('statusPieChart');
    const ctx = canvas.getContext('2d');

    // Define colors for the pie slices
    const colors = ['#e099f8', '#FF9C9C', '#99d5f8', '#CFF6D1'];

    // Define canvas dimensions
    const canvasWidth = 300;
    const canvasHeight = 300;
    const centerX = canvasWidth / 2;
    const centerY = canvasHeight / 2;
    const radius = canvasWidth / 2 - 20; // Smaller radius to fit within the canvas

    // Calculate the starting and ending angles for each slice
    let startAngle = 0;
    const labels = Object.keys(percentages);
    const data = Object.values(percentages);

    data.forEach((percentage, index) => {
      const sliceAngle = (percentage / 100) * 2 * Math.PI;
      const endAngle = startAngle + sliceAngle;

      // Draw the pie slice
      ctx.beginPath();
      ctx.moveTo(centerX, centerY); // Center of the pie
      ctx.arc(centerX, centerY, radius, startAngle, endAngle);
      ctx.closePath();
      ctx.fillStyle = colors[index % colors.length];
      ctx.fill();

      startAngle = endAngle;
    });

    // Draw the labels
    startAngle = 0;
    ctx.fillStyle = "#000";
    ctx.font = "12px Arial"; // Smaller font size for the labels
    data.forEach((percentage, index) => {
      const sliceAngle = (percentage / 100) * 2 * Math.PI;
      const labelX = centerX + (radius / 1.5) * Math.cos(startAngle + sliceAngle / 2);
      const labelY = centerY + (radius / 1.5) * Math.sin(startAngle + sliceAngle / 2);

      ctx.fillText(`${labels[index]}: ${percentage}%`, labelX, labelY);
      startAngle += sliceAngle;
    });

    var searchInput = document.getElementById('lead-name-filter_home');

    if (searchInput) {
      searchInput.addEventListener('input', function() {
        var filterValue = this.value.trim().toLowerCase();
        console.log("Search input value changed:", filterValue);

      var queryParams = new URLSearchParams({
      company: filterValue
    }).toString();

    fetch('/home/filter?' + queryParams, {
      method: 'POST',
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
        'Accept': 'application/json'
      }
    })
    .then(response => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error('Network response was not ok: ' + response.statusText);
      }
    })
    .then(data => {
      console.log('Filtered leads:', data);
      updateLeadsUI(data);
    })
    .catch(error => console.error('Request failed:', error));
  });

    }

    function updateLeadsUI(filteredLeads) {
    var table = document.querySelector('#filterTable');
    if (!table) {
        console.error('Table not found');
        return;
    }

    var tableBody = table.querySelector('tbody');
    if (!tableBody) {
        tableBody = document.createElement('tbody');
        table.appendChild(tableBody);
    }

    // Clear existing rows
    tableBody.innerHTML = '';

    // Populate table with filtered leads
    filteredLeads.forEach(function(lead) {
      var statusClass = leadStatusClass(lead.status);
      var row = document.createElement('tr');
      row.innerHTML = `
        <td><div class="cell-content">${lead.first_name} ${lead.last_name}</div></td>
        <td>${lead.company}</td>
        <td>${lead.phone || lead.mobile}</td>
        <td>${lead.email}</td>
        <td class="${statusClass}">${lead.status}</td>
        <td>${lead.created_at}</td>
        <td>${lead.assigned_to}</td>
        <td>
        </td>
      `;
      tableBody.appendChild(row);
    });

    function leadStatusClass(status) {
      switch (status) {
        case "new":
          return "ovalStatusNew";
        case "rejected":
          return "ovalStatusPendind";
        case "contacted":
          return "ovalStatusOkey";
        case "won":
          return "ovalStatusWon";
        default:
          return "ovalStatusPendind";  // Default class for other statuses
  }
  }
  }
  });

