- model_name = controller_name.singularize
- model_klass = model_name.camelcase.constantize
%div.borderBottomLeads
  .title_tools
    #buttons
      = view_buttons
    .create_asset{ data: { target: "#popupContainer#{model_name.camelcase}" } }
      = link_to_inline("create_#{model_name}".to_sym, send("new_#{model_name}_path"), {text: t("create_#{model_name}".to_sym), class: 'btn-sm btn btn-outline-primary'})
  %div
    %input#lead-name-filter.heightInputsCustom.newCustomButton{ placeholder: "Search Lead", type: "text" }
-# .title
-#   %span{id: "create_#{model_name}_title"} #{t controller_name.to_sym}
-#   = image_tag("loading.gif", size: :thumb, id: "loading", style: "display: none;")
:javascript
  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.create_asset').forEach(function(button) {
      button.addEventListener('click', function(event) {
        event.preventDefault();
        var targetPopupSelector = button.getAttribute('data-target');
        var targetPopup = document.querySelector(targetPopupSelector);

        if (targetPopup) {
          targetPopup.classList.toggle('show');
          console.log(`Toggled visibility for ${targetPopupSelector}`);
        } else {
          console.log("Target popup not found");
        }
      });
    });

    var searchInput = document.getElementById('lead-name-filter');

    if (searchInput) {
      searchInput.addEventListener('input', function() {
        var filterValue = this.value.trim().toLowerCase();
        console.log("Search input value changed:", filterValue);

        var xhr = new XMLHttpRequest();
        xhr.open('GET', '/leads.json?company=' + encodeURIComponent(filterValue), true); // Note the .json format
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest'); // Set header to identify AJAX request
        xhr.onload = function() {
          if (xhr.status === 200) {
            var response = JSON.parse(xhr.responseText);
            console.log('Filtered leads:', response);

            // Handle updating the UI with filtered results
            updateLeadsUI(response);
          } else {
            console.error('Request failed. Status:', xhr.status);
          }
        };
        xhr.send();

        // Additional logic to filter and display leads as per your UI requirements
      });
    }
  });

  function updateLeadsUI(filteredLeads) {
  var table = document.querySelector('#filterTable tbody');
  if (!table) {
    console.error('Table body not found');
    return;
  }

  // Clear existing rows
  table.innerHTML = '';

  // Populate table with filtered leads
  filteredLeads.forEach(function(lead) {
    var statusClass = leadStatusClass(lead.status);
    var row = document.createElement('tr');

    // Create each cell and add p-14 class to each one
    ['company', 'phone', 'email', 'status', 'created_at', 'assigned_to'].forEach(function(cell) {
      var td = document.createElement('td');
      td.textContent = lead[cell];
      td.classList.add('p-14');
      if (cell === 'created_at') {
        // Convert lead.created_at to the desired format (e.g., "2024-07-03")
        var formattedDate = new Date(lead[cell]).toISOString().split('T')[0];
        td.textContent = formattedDate;
      } else {
        td.textContent = lead[cell];
      }
      if (cell === 'status') {
        td.classList.add(statusClass);
      }
      row.appendChild(td);
    });

    // Optional: Add additional cell with links
    var actionsCell = document.createElement('td');
    actionsCell.innerHTML = `
      <a href="/leads/${lead.id}/edit" class="edit-lead-link">Edit</a> |
      <a href="/leads/${lead.id}" data-confirm="Are you sure?" data-method="delete" rel="nofollow">Delete</a>
    `;
    row.appendChild(actionsCell);

    table.appendChild(row);
    });

    function leadStatusClass(status) {
      switch (status) {
        case "new":
          return "ovalStatusNew";
        case "rejected":
          return "ovalStatusPendind";
        case "contacted":
          return "ovalStatusOkey";
        case "won":
          return "ovalStatusWon";
        default:
          return "ovalStatusPendind";  // Default class for other statuses
  }
  }
  }
