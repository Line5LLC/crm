- model_name = controller_name.singularize
- model_klass = model_name.camelcase.constantize
%div.borderBottomLeads
  .title_tools
    #buttons
      = view_buttons
    .create_asset{ data: { target: "#popupContainer#{model_name.camelcase}" } }
      = link_to_inline("create_#{model_name}".to_sym, send("new_#{model_name}_path"), {text: t("create_#{model_name}".to_sym), class: 'btn-sm btn btn-outline-primary'})
  %div
    -# %input#lead-name-filter.heightInputsCustom.newCustomButton{ placeholder: "Search", type: "text" }
    %input#customInputFilter.newCustomButton{ placeholder: "Search", type: "text", data: { type: controller_name.singularize } }
-# .title
-#   %span{id: "create_#{model_name}_title"} #{t controller_name.to_sym}
-#   = image_tag("loading.gif", size: :thumb, id: "loading", style: "display: none;")
:javascript
  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.create_asset').forEach(function(button) {
      button.addEventListener('click', function(event) {
        event.preventDefault();
        var targetPopupSelector = button.getAttribute('data-target');
        var targetPopup = document.querySelector(targetPopupSelector);

        if (targetPopup) {
          targetPopup.classList.toggle('show');
          console.log(`Toggled visibility for ${targetPopupSelector}`);
        } else {
          console.log("Target popup not found");
        }
      });
    });

  var filterInput = document.querySelector('#customInputFilter');

  if (filterInput) {
    filterInput.addEventListener('input', function() {
      var filterValue = this.value.trim().toLowerCase();
      var dataType = this.dataset.type;

      switch (dataType) {
        case 'lead':
          filterLeads(filterValue);
          break;
        case 'campaign':
          filterCampaigns(filterValue);
          break;
        default:
          console.error('Unsupported data type:', dataType);
          break;
      }
    });
  }

  function filterLeads(filterValue) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', '/leads.json?company=' + encodeURIComponent(filterValue), true);
    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    xhr.onload = function() {
      if (xhr.status === 200) {
        var response = JSON.parse(xhr.responseText);
        console.log('Filtered leads:', response);
        updateLeadsUI(response);
      } else {
        console.error('Request failed. Status:', xhr.status);
      }
    };
    xhr.send();
  }

  function filterCampaigns(filterValue) {
    console.log("filtering vampaings")
    var xhr = new XMLHttpRequest();
    xhr.open('GET', '/campaigns.json?name=' + encodeURIComponent(filterValue), true);
    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    xhr.onload = function() {
      if (xhr.status === 200) {
        var response = JSON.parse(xhr.responseText);
        console.log('Filtered campaigns:', response);
         console.log("filtering updateCampaignsUI")
        updateCampaignsUI(response);
      } else {
        console.error('Request failed. Status:', xhr.status);
      }
    };
    xhr.send();
  }

  });

  function updateLeadsUI(filteredLeads) {
    var table = document.querySelector('#filterTable tbody');
    if (!table) {
      console.error('Table body not found');
      return;
    }

    // Clear existing rows
    table.innerHTML = '';

    // Populate table with filtered leads
    filteredLeads.forEach(function(lead) {
      var statusClass = leadStatusClass(lead.status);
      var row = document.createElement('tr');

      // Create each cell and add p-14 class to each one
      ['company', 'phone', 'email', 'status', 'created_at', 'assigned_to'].forEach(function(cell) {
        var td = document.createElement('td');
        td.textContent = lead[cell];
        td.classList.add('p-14');
        if (cell === 'created_at') {
          // Convert lead.created_at to the desired format (e.g., "2024-07-03")
          var formattedDate = new Date(lead[cell]).toISOString().split('T')[0];
          td.textContent = formattedDate;
        } else {
          td.textContent = lead[cell];
        }
        if (cell === 'status') {
          td.classList.add(statusClass);
        }
        row.appendChild(td);
      });

      // Optional: Add additional cell with links
      var actionsCell = document.createElement('td');
      actionsCell.innerHTML = `
        <a href="/leads/${lead.id}/edit" class="edit-lead-link">Edit</a> |
        <a href="/leads/${lead.id}" data-confirm="Are you sure?" data-method="delete" rel="nofollow">Delete</a>
      `;
      row.appendChild(actionsCell);

      table.appendChild(row);
    });

    function leadStatusClass(status) {
      switch (status) {
        case "new":
          return "ovalStatusNew";
        case "rejected":
          return "ovalStatusPendind";
        case "contacted":
          return "ovalStatusOkey";
        case "won":
          return "ovalStatusWon";
        default:
          return "ovalStatusPendind";  // Default class for other statuses
    }

    }
  }

  function updateCampaignsUI(filteredCampaigns) {
  console.log("this ui capaing have been called ")
  var tableBody = document.querySelector('#filterTableCampaing tbody');
  if (!tableBody) {
    console.error('Table body not found');
    return;
  }

  // Clear existing rows
  tableBody.innerHTML = '';

  // Populate table with filtered campaigns
  filteredCampaigns.forEach(function(campaign) {
    var row = document.createElement('tr');

    // Create cells for each campaign property
    ['name', 'assigned_to', 'budget', 'leads_count', 'revenue', 'starts_on', 'ends_on', 'target_leads', 'status'].forEach(function(property) {
      var td = document.createElement('td');
      td.textContent = campaign[property];
      td.classList.add('p-14');

      if (property === 'status') {
        td.classList.add(campaignStatusClass(campaign[property]));
      }

      row.appendChild(td);
    });

    // Create action cell with edit and delete links
    var actionsCell = document.createElement('td');
    actionsCell.innerHTML = `
      <a href="/campaigns/${campaign.id}/edit" class="edit-campaign-link">Edit</a> |
      <a href="/campaigns/${campaign.id}" data-confirm="Are you sure?" data-method="delete" rel="nofollow">Delete</a>
    `;
    row.appendChild(actionsCell);

    // Append row to table body
    tableBody.appendChild(row);
  });
  }

  function campaignStatusClass(status) {
    switch (status) {
      case "Planned":
        return "ovalStatusNew";
      case "Started":
        return "ovalStatusPendind";
      case "completed":
        return "ovalStatusOkey";
      case "on hold":
      case "called of": // Fixed typo in status comparison
        return "ovalStatusWon";
      default:
        return "ovalStatusPendind";  // Default class for other statuses
    }
  }
