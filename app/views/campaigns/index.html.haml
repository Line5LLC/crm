= styles_for :campaign
- view   ||= controller.controller_name
- action ||= controller.action_name
- sidebar = "#{view}/sidebar_#{action}" unless action.to_s == 'show'
- sidebar = "admin/#{sidebar}" if controller.class.to_s.starts_with?("Admin::")

.remote#options{ hidden }
%div.mt-2
  %h1 CAMPAIGNS
%div#popupContainerCampaign.popup
  %div.popup-contentCamp.mt-2
    .remote#create_campaign{ hidden }

%div#editCampaignPopup.popup
  %div.popup-content.mt-2
    %div#edit_campaign{ hidden }
  
-# .list#campaigns
-#   - if @campaigns.any?
-#     = render @campaigns
-#   - else
-#     = render "shared/empty"
%div.leadsBoxContainer.mt-2
  = render 'entities/title_bar'
  %div.testTOCheck.mt-2
    %div.flex.mt-2
      %div.input-with-icon.mar-r
        %button.newCustomButton{"data-bs-target" => "#exampleModalTwo", "data-bs-toggle" => "modal", type: "button"}
          %span.button-text Sort
        %i.fa.fa-user.mar-r-icons-2
      %div
        %div.input-with-icon
          %button.newCustomButton{"data-bs-target" => "#exampleModalThree", "data-bs-toggle" => "modal", type: "button"}
            12/03/24 - 12/10/24
          %i.fa.fa-user.mar-r-icons
    %div.flex.mt-2
      %div.mar-r
        %div.input-with-icon
          %button.newCustomButton{"data-bs-target" => "#exampleModal", "data-bs-toggle" => "modal", type: "button"}
            Filters
          %i.fa.fa-user.mar-r-icons-2
  %div.table-responsive
    %table#filterTableCampaing.fs-14.tableBorderLeads.mt-2
      %thead
        %tr
          %th.p-14.theadLeads Campaing Name
          %th.p-14.theadLeads Assigned To    
          %th.p-14.theadLeads Budget
          %th.p-14.theadLeads Leads Count 
          %th.p-14.theadLeads Revenue  
          %th.p-14.theadLeads Starts On  
          %th.p-14.theadLeads Ends On     
          %th.p-14.theadLeads Target Leads 
          %th.p-14.theadLeads Status
          %th.p-14.theadLeads Create At:
          %th.p-14.theadLeads Actions
      %tbody
        - @campaigns.each do |campaign|
          %tr
            %td.p-14= campaign.name
            %td.p-14= campaign.assigned_to
            %td.p-14= campaign.budget
            %td.p-14= campaign.leads_count
            %td.p-14= campaign.revenue
            %td.p-14= campaign.starts_on # Adjust date format if needed
            %td.p-14= campaign.ends_on # Assuming assigned_to is the lead owner
            %td.p-14= campaign.target_leads
            %td.p-14{:class => campaign_status_class(campaign.status)}= campaign.status
            %td.p-14= campaign.created_at.strftime("%Y-%m-%d")
            %td.p-14
              = link_to_inline(:edit_campaign, edit_campaign_path(campaign), text: t(:edit), class: "edit-campaign-link") + " | "
              = link_to_delete(campaign, confirm: t(:are_you_sure))

#exampleModal.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "exampleModalLabel", tabindex: "-1"}
  .modal-dialog
    .modal-content
      .modal-header
        %h5#exampleModalLabel.modal-title Modal title
        %button.btn-close{"aria-label" => "Close", "data-bs-dismiss" => "modal", type: "button"}
      .modal-body
        = content_for :sidebar
        - begin
          = render sidebar if sidebar
          - rescue MissingTemplate
      .modal-footer
        %button.btn.btn-primary{type: "button"} Save changes


#exampleModalTwo.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "exampleModalLabel", tabindex: "-1"}
  .modal-dialog
    .modal-content
      .modal-header
        %h5#exampleModalLabel.modal-title SORT Campaings
        %button.btn-close{"aria-label" => "Close", "data-bs-dismiss" => "modal", type: "button"}
      .modal-body
        %div 
          %div
            %div.flex.al-item
              %div
                %input{type: "checkbox", class:"custom-checkbox-campaing", value: "asc"}
              %div
                %label
                  Ascending
            %div.flex.al-item
              %div
                %input{type: "checkbox", class:"custom-checkbox-campaing", value: "desc"}
              %div
                %label
                  Descending
      .modal-footer
        %button#submitSortCampaings.btn.btn-primary{type: "button"} Save changes

#exampleModalThree.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "exampleModalLabel", tabindex: "-1"}
  .modal-dialog
    .modal-content
      .modal-header
        %h5#exampleModalLabel.modal-title DATES
        %button.btn-close{"aria-label" => "Close", "data-bs-dismiss" => "modal", type: "button"}
      .modal-body
        %div 
          %div
            %div.flex.al-item
              %div
                %input{type: "checkbox", name: "date_filter", value: "today", class: "custom-checkbox-campaing"}
              %div
                %label
                  Today
            %div.flex.al-item
              %div
                %input{type: "checkbox", name: "date_filter", value: "yesterday", class: "custom-checkbox-campaing"}
              %div
                %label
                  Yesterday
            %div.flex.al-item
              %div
                %input{type: "checkbox", name: "date_filter", value: "last_7_days", class: "custom-checkbox-campaing"}
              %div
                %label
                  Last 7 Days
            %div.flex.al-item
              %div
                %input{type: "checkbox", name: "date_filter", value: "last_30_days", class: "custom-checkbox-campaing"}
              %div
                %label
                  Last 30 Days
            %div.flex.mt-1
              %div
                %input{type: "checkbox", name: "date_filter", value: "custom_range", class: "custom-checkbox-campaing"}
              %div
                %label Custom Range
                %input{type: "date", name: "start_date", placeholder: "Start Date", class: "form-control mt-5px"} 
                %input{type: "date", name: "end_date", placeholder: "End Date", class: "form-control hideInput"}
      .modal-footer
        %button.btn.btn-primary{id: "submitButtonDates", type: "button"} Save changes

#paginate= render "shared/paginate_with_per_page"
#export= render "shared/export"

:javascript 

  document.addEventListener('DOMContentLoaded', function() {
  var editLinks = document.querySelectorAll('.edit-campaign-link');
  var popupContent = document.querySelectorAll('.popup-content');
  var editLeadPopup = document.getElementById('editCampaignPopup');
  console.log("editLeadPopup", editLeadPopup)
  var closeEditLeadPopup = document.getElementById('closeEditLeadPopup');

  //edit js 
  editLinks.forEach(function(link) {
    link.addEventListener('click', function(event) {
      event.preventDefault();
      var url = this.href;
      console.log("url", url)

      // Fetch edit form content via AJAX
      fetch(url, {
        method: 'GET',
        headers: {
          'X-Requested-With': 'XMLHttpRequest' // Set header for Rails to recognize AJAX request
        }
      })
      .then(response => response.text())
      .then(data => {
        console.log("data", data)
        popupContent.innerHTML = data; // Insert fetched HTML into popup content
        editLeadPopup.classList.toggle('show'); // Show the popup
      })
      .catch(error => console.error('Error fetching edit form:', error));
    });
    });

  if (closeEditLeadPopup) {
    closeEditLeadPopup.addEventListener('click', function() {
      editLeadPopup.classList.remove('show');
    });
  }
  //filter campaings by date 
  var submitButtonDates = document.getElementById('submitButtonDates');
  submitButtonDates.addEventListener('click', function() {
    var checkboxes = document.querySelectorAll('.custom-checkbox-campaing');
    var checkedFilters = Array.from(checkboxes)
      .filter(cb => cb.checked)
      .map(cb => cb.value);

    var startDate = document.querySelector('input[name="start_date"]').value;
    if (startDate) {
    checkedFilters.push("custom_range");
    }

    var params = {
      date_filter: checkedFilters.join(','),
      start_date: startDate,
    };

    // Construct query parameters from params object
    var queryParams = new URLSearchParams(params).toString();
    console.log("queryParams", queryParams)

      fetch('/campaigns/filter_date_campaigns?' + queryParams, {
      method: 'GET',
      headers: {
        'X-Requested-With': 'XMLHttpRequest' // Signal to Rails that this is an AJAX request
      }
    })
    .then(response => response.json()) // Parse response as JSON
    .then(data => {
      console.log("Received data from campaings ", data); // Log the entire data object

      var tableBody = document.querySelector('#filterTableCampaing tbody');
      tableBody.innerHTML = ""; // Clear existing table rows

      if (data.campaigns && data.campaigns.length > 0) {
        data.campaigns.forEach(campaign => {
          var statusClass = campaignStatusClass(campaign.status);
          var newRow = document.createElement('tr');
          newRow.innerHTML = `
            <td>${campaign.name}</td>
            <td>${campaign.assigned_to}</td>
            <td>${campaign.budget}</td>
            <td >${campaign.leads_count}</td>
            <td>${new Date(campaign.created_at).toLocaleDateString()}</td>
            <td>${campaign.leads_count}</td>
            <td class="">${campaign.revenue}</td>
            <td>${campaign.starts_on}</td>
            <td>${campaign.ends_on}</td>
            <td>${campaign.target_leads}</td>
            <td class="${statusClass}">${campaign.status}</td>
            <td>${campaign.created_at}</td>
            <td>
              <a href="/campaigns/${campaign.id}/edit" class="edit-lead-link">Edit</a> |
              <a href="/campaigns/${campaign.id}" data-confirm="Are you sure?" data-method="delete" rel="nofollow">Delete</a>
            </td>
          `;
          tableBody.appendChild(newRow);
        });
      } else {
        console.log("No leads found in data.");
      }
      var modalElement = document.getElementById('exampleModalThree');
      var modalInstance = bootstrap.Modal.getInstance(modalElement);
      if (modalInstance) {
        modalInstance.hide();
      }
    })
    .catch(error => console.error('Error fetching leads:', error));
  });

  //sort filter for campaings 
  var submitButtonSortCampaings = document.getElementById('submitSortCampaings');
  submitButtonSortCampaings.addEventListener('click', function() {
  var checkboxes = document.querySelectorAll('.custom-checkbox-campaing:checked');
  var order = 'asc'; // Default to ascending if no checkbox is selected

  if (checkboxes.length > 0) {
    order = checkboxes[0].value; // Get the value of the first checked checkbox (either 'asc' or 'desc')
    console.log("order", order)
  }

  var queryParams = new URLSearchParams({
    order: order
    // Add other parameters like date filters if needed
  }).toString();

  fetch('/campaigns/sort_campaigns?' + queryParams, {
    method: 'GET',
    headers: {
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
  .then(response => response.json())
  .then(data => {
    console.log("Received data from campaings", data);

    var tableBody = document.querySelector('#filterTableCampaing tbody');
    tableBody.innerHTML = ""; // Clear existing table rows

    if (data.campaigns && data.campaigns.length > 0) {
      data.campaigns.forEach(campaign => {
        var statusClass = campaignStatusClass(campaign.status);
        var newRow = document.createElement('tr');
        newRow.innerHTML = `
          <td>${campaign.name}</td>
          <td>${campaign.assigned_to}</td>
          <td>${campaign.budget}</td>
          <td >${campaign.leads_count}</td>
          <td>${new Date(campaign.created_at).toLocaleDateString()}</td>
          <td>${campaign.leads_count}</td>
          <td class="">${campaign.revenue}</td>
          <td>${campaign.starts_on}</td>
          <td>${campaign.ends_on}</td>
           <td>${campaign.target_leads}</td>
           <td class="${statusClass}">${campaign.status}</td>
          <td>
            <a href="/campaigns/${campaign.id}/edit" class="edit-lead-link">Edit</a> |
            <a href="/campaigns/${campaign.id}" data-confirm="Are you sure?" data-method="delete" rel="nofollow">Delete</a>
          </td>
        `;
        tableBody.appendChild(newRow);
      });
    } else {
      console.log("No leads found in data.");
    }
     var modalElement = document.getElementById('exampleModalTwo');
      var modalInstance = bootstrap.Modal.getInstance(modalElement);
      console.log("modalElement", modalElement)
      if (modalInstance) {
        modalInstance.hide();
      }
  })
  .catch(error => {
    console.error('Error fetching data:', error);
  });
  });
  function campaignStatusClass(status) {
    switch (status) {
      case "Planned":
        return "ovalStatusNew";
      case "Started":
        return "ovalStatusPendind";
      case "completed":
        return "ovalStatusOkey";
      case "on hold":
      case "called of": // Fixed typo in status comparison
        return "ovalStatusWon";
      default:
        return "ovalStatusPendind";  // Default class for other statuses
    }
  }

  });
